name: Publish Python Package to GitHub Packages

on:
  push:
    tags: ["python-v*"]
  workflow_dispatch:
    inputs:
      publish:
        description: "Publish to GitHub Packages"
        required: true
        default: true
        type: boolean

defaults:
  run:
    working-directory: ./python

env:
  # For ease of development, we make rustls default. But for release we should
  # use native TLS.
  FEATURES_FLAG: --no-default-features --features native-tls

jobs:
  validate-release-tag:
    name: Validate git tag
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3
      - name: compare git tag with cargo metadata
        run: |
          PUSHED_TAG=${GITHUB_REF##*/}
          CURR_VER=$( grep version Cargo.toml | head -n 1 | awk '{print $3}' | tr -d '"' )
          if [[ "${PUSHED_TAG}" != "python-v${CURR_VER}" ]]; then
            echo "Cargo metadata has version set to ${CURR_VER}, but got pushed tag ${PUSHED_TAG}."
            exit 1
          fi

  build-package:
    name: Build Python Package
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-x86_64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-aarch64
          - target: x86_64-apple-darwin
            os: macos-14
            name: macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-14
            name: macos-aarch64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows-x86_64
    runs-on: ${{ matrix.os }}
    needs: validate-release-tag
    if: always() && (needs.validate-release-tag.result == 'success' || github.event_name == 'workflow_dispatch')

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: default
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Build wheel
        uses: messense/maturin-action@v1
        with:
          maturin-version: v1.6.0
          target: ${{ matrix.target }}
          command: build
          args: --release -m python/Cargo.toml ${{ env.FEATURES_FLAG }} ${{ matrix.target == 'x86_64-unknown-linux-gnu' && '--sdist' || '' }}
          before-script-linux: |
            yum install -y perl-IPC-Cmd
            # Special handling for ARM build
            if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
              export CFLAGS_aarch64_unknown_linux_gnu="-D__ARM_ARCH=8"
            fi

      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions-${{ matrix.name }}
          path: target/wheels/

  publish-to-github-packages:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: build-package
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          pattern: python-package-distributions-*
          path: dist/
          merge-multiple: true

      - name: List downloaded files
        run: |
          echo "Downloaded distribution files:"
          ls -la dist/
          echo "File count: $(ls -1 dist/ | wc -l)"

      - name: Install twine
        run: pip install twine

      - name: Publish package to GitHub Packages
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.GH_PAT }}
        run: |
          echo "Publishing to GitHub Packages for repository: ${{ github.repository_owner }}"
          python -m twine upload --repository-url https://pypi.pkg.github.com/${{ github.repository_owner }}/ dist/* --verbose
